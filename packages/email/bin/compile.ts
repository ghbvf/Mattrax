// This script prerenders emails and generates the typesafe code to send them.
// We've had too many problems with `react-email` on Edge, so we just prerender.
// This also means we don't need to bundle a whole class of stuff at runtime which is neat.

import fs from "node:fs";
import path from "node:path";
import { render } from "@react-email/render";

const emails = [
	"../emails/LoginCode",
	"../emails/TenantAdminInvite",
	"../emails/UserEnrollmentInvite",
];

console.log("Rendering...");
const p = path.join(process.cwd(), "src", "emails.gen.tsx");
let result = `// Generated by '../bin/compile.ts'. Do not modify manually!\n
import type { RequestSchema } from \"./index\";\n
export const emails = {\n`;

for (const emailPath of emails) {
	const source = await import(emailPath);

	if (source.default === undefined || typeof source.default !== "function")
		throw new Error(`Email "${emailPath}" does not have a default export.`);

	if (source.default.PreviewProps === undefined)
		throw new Error(
			`Email "${emailPath}" does not have a PreviewProps export.`,
		);

	if (source.type === undefined)
		throw new Error(`Email "${emailPath}" does not have a type export.`);

	const compiled = await render(source.default(source.default.PreviewProps));

	let replaces = "";
	for (const key in source.default.PreviewProps) {
		replaces += `.replace('${source.default.PreviewProps[key]}', args.${key})`;
	}

	result += `\t${JSON.stringify(source.type)}: (args: Extract<RequestSchema, { type: ${JSON.stringify(source.type)} }>) => ${JSON.stringify(compiled)}${replaces},\n`;
}
result += "};";

fs.writeFileSync(p, result);
